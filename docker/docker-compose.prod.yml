version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:14-alpine
    container_name: mirage_db
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mirage_db}
      - POSTGRES_USER=${POSTGRES_USER:-mirage_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d:ro
      - ./backups:/backups
    networks:
      - mirage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mirage_user} -d ${POSTGRES_DB:-mirage_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mirage_redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - mirage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: mirage_rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER:-mirage_mq}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
      - RABBITMQ_DEFAULT_VHOST=/
      - RABBITMQ_VM_MEMORY_HIGH_WATERMARK=0.6
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    ports:
      - "${RABBITMQ_MGMT_PORT:-15672}:15672"  # Management UI
    networks:
      - mirage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Main Web Application
  webapp:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: production
    image: ghcr.io/scllpadmin/mirage:${VERSION:-latest}
    container_name: mirage_webapp
    environment:
      # Database
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mirage_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-mirage_db}
      
      # Cache
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      
      # Message Queue
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-mirage_mq}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      
      # Application
      - SECRET_KEY=${SECRET_KEY}
      - FLASK_ENV=production
      - FLASK_DEBUG=false
      - WTF_CSRF_ENABLED=true
      
      # Security
      - SECURITY_PASSWORD_SALT=${SECURITY_PASSWORD_SALT}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SESSION_TIMEOUT=${SESSION_TIMEOUT:-3600}
      
      # Admin Account
      - ADMIN_EMAIL=${ADMIN_EMAIL:-admin@mirage.local}
      - INITIAL_ADMIN_PASSWORD=${INITIAL_ADMIN_PASSWORD}
      
      # Integrations - Threat Intel
      - MISP_URL=${MISP_URL}
      - MISP_API_KEY=${MISP_API_KEY}
      - MISP_VERIFY_SSL=${MISP_VERIFY_SSL:-true}
      - MISP_RATE_LIMIT=${MISP_RATE_LIMIT:-60}
      
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - VIRUSTOTAL_RATE_LIMIT=${VIRUSTOTAL_RATE_LIMIT:-4}
      
      - ANYRUN_API_KEY=${ANYRUN_API_KEY}
      - ANYRUN_RATE_LIMIT=${ANYRUN_RATE_LIMIT:-10}
      
      - GREYNOISE_API_KEY=${GREYNOISE_API_KEY}
      - GREYNOISE_RATE_LIMIT=${GREYNOISE_RATE_LIMIT:-100}
      
      - HYBRID_ANALYSIS_API_KEY=${HYBRID_ANALYSIS_API_KEY}
      - HYBRID_ANALYSIS_SECRET=${HYBRID_ANALYSIS_SECRET}
      - HYBRID_ANALYSIS_RATE_LIMIT=${HYBRID_ANALYSIS_RATE_LIMIT:-20}
      
      # Integrations - EDR/XDR
      - SENTINELONE_BASE_URL=${SENTINELONE_BASE_URL}
      - SENTINELONE_API_TOKEN=${SENTINELONE_API_TOKEN}
      - SENTINELONE_ACCOUNT_ID=${SENTINELONE_ACCOUNT_ID}
      
      - CROWDSTRIKE_CLIENT_ID=${CROWDSTRIKE_CLIENT_ID}
      - CROWDSTRIKE_CLIENT_SECRET=${CROWDSTRIKE_CLIENT_SECRET}
      - CROWDSTRIKE_BASE_URL=${CROWDSTRIKE_BASE_URL:-https://api.crowdstrike.com}
      
      - SOPHOS_CLIENT_ID=${SOPHOS_CLIENT_ID}
      - SOPHOS_CLIENT_SECRET=${SOPHOS_CLIENT_SECRET}
      - SOPHOS_BASE_URL=${SOPHOS_BASE_URL}
      
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - ./backups:/app/backups
      - ./certs:/app/certs:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - mirage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Background Worker
  worker:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: worker
    image: ghcr.io/scllpadmin/mirage-worker:${VERSION:-latest}
    container_name: mirage_worker
    command: celery -A app.celery worker --loglevel=info --concurrency=4 --max-tasks-per-child=1000
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mirage_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-mirage_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-mirage_mq}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - SECRET_KEY=${SECRET_KEY}
      
      # Same integration environment variables as webapp
      - MISP_URL=${MISP_URL}
      - MISP_API_KEY=${MISP_API_KEY}
      - MISP_VERIFY_SSL=${MISP_VERIFY_SSL:-true}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - ANYRUN_API_KEY=${ANYRUN_API_KEY}
      - GREYNOISE_API_KEY=${GREYNOISE_API_KEY}
      - HYBRID_ANALYSIS_API_KEY=${HYBRID_ANALYSIS_API_KEY}
      - SENTINELONE_BASE_URL=${SENTINELONE_BASE_URL}
      - SENTINELONE_API_TOKEN=${SENTINELONE_API_TOKEN}
      - SENTINELONE_ACCOUNT_ID=${SENTINELONE_ACCOUNT_ID}
      - CROWDSTRIKE_CLIENT_ID=${CROWDSTRIKE_CLIENT_ID}
      - CROWDSTRIKE_CLIENT_SECRET=${CROWDSTRIKE_CLIENT_SECRET}
      - SOPHOS_CLIENT_ID=${SOPHOS_CLIENT_ID}
      - SOPHOS_CLIENT_SECRET=${SOPHOS_CLIENT_SECRET}
      
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
      - worker_tmp:/tmp
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - mirage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery", "inspect", "ping"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Celery Beat Scheduler
  scheduler:
    build:
      context: ../backend
      dockerfile: Dockerfile
      target: worker
    image: ghcr.io/scllpadmin/mirage-worker:${VERSION:-latest}
    container_name: mirage_scheduler
    command: celery -A app.celery beat --loglevel=info --pidfile=/tmp/celerybeat.pid
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mirage_user}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB:-mirage_db}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-mirage_mq}:${RABBITMQ_PASSWORD}@rabbitmq:5672/
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - app_logs:/app/logs
      - scheduler_data:/tmp
    depends_on:
      - db
      - redis
      - rabbitmq
    networks:
      - mirage_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Frontend Application
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
      target: production
    image: ghcr.io/scllpadmin/mirage-frontend:${VERSION:-latest}
    container_name: mirage_frontend
    volumes:
      - frontend_dist:/usr/share/nginx/html:ro
    networks:
      - mirage_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # NGINX Reverse Proxy
  nginx:
    image: nginx:1.24-alpine
    container_name: mirage_nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certs:/etc/nginx/certs:ro
      - nginx_logs:/var/log/nginx
      - frontend_dist:/usr/share/nginx/html:ro
    depends_on:
      - webapp
      - frontend
    networks:
      - mirage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: mirage_prometheus
    volumes:
      - ../monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - mirage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:10.1.0
    container_name: mirage_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin123}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    networks:
      - mirage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Log Management - Filebeat
  filebeat:
    image: elastic/filebeat:8.10.0
    container_name: mirage_filebeat
    user: root
    volumes:
      - ../monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - app_logs:/var/log/mirage:ro
      - nginx_logs:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOSTS=elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - mirage_network
    restart: unless-stopped
    command: filebeat -e -strict.perms=false
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'

  # Log Storage - Elasticsearch
  elasticsearch:
    image: elasticsearch:8.10.0
    container_name: mirage_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - mirage_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

networks:
  mirage_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local
  app_uploads:
    driver: local
  app_logs:
    driver: local
  worker_tmp:
    driver: local
  scheduler_data:
    driver: local
  frontend_dist:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
